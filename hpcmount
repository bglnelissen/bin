#!/bin/bash
# Mount directory from the hpc to the local system.
# b.nelissen

# Install using brew:
# brew install osxfuse, or http://osxfuse.github.io

# If upgrading from a previous version of osxfuse, the previous kernel extension
# will need to be unloaded before installing the new version. First, check that
# no FUSE-based file systems are running:
# 
#   mount -t osxfusefs
# 
# Unmount all FUSE file systems and then unload the kernel extension:
# 
#   sudo kextunload -b com.github.osxfuse.filesystems.osxfusefs
# 
# The new osxfuse file system bundle needs to be installed by the root user:
# 
#   sudo /bin/cp -RfX /usr/local/Cellar/osxfuse/2.6.2/Library/Filesystems/osxfusefs.fs /Library/Filesystems
#   sudo chmod +s /Library/Filesystems/osxfusefs.fs/Support/load_osxfusefs

# sshfs: brew install sshfs

# setup variables
GWHOST="gw.op.umcutrecht.nl"
HPCHOST="hpcs01.op.umcutrecht.nl"
HPCUSER="bnelissen"
HPCKEY="${HOME}/.ssh/id_rsa_hpc" # private key, the public key is on the server
PORT=2222
SSHFLAGS="$@" 
# mount hpc
VOLUMENAME="Llama"
MOUNTPOINT="/Volumes/${VOLUMENAME}"
REMOTELOCATION="~" # leave empty for home ""

# setup functions
function echobold {
  echo -e "\033[1m${1}\033[0m"
}

# say hello
clear
echobold "$(basename $0) - Mount $REMOTELOCATION on $HPCHOST"
echo "  (need help? b.g.l.nelissen@umcutrecht.nl)"
echo ""

# check if disk is already mounted
MOUNTSTATUS=$(mount | grep /Volumes/Llama | wc -l)
if [[ 0 != $MOUNTSTATUS ]]; then
  # ping has an exit status that is not null (=error)
  echobold "Disk is already mounted"
  echo "Exit $(basename $0)"
  exit 1
fi

# check if host is available
PINGOUTPUT=$(ping -c 1 "$GWHOST")
PINGEXITSTATUS=$?
if [[ 0 != $PINGEXITSTATUS ]]; then
  # ping has an exit status that is not null (=error)
  echo "Can not ping $GWHOST"
  echo "Exit $(basename $0)"
  exit 1
else
  # capture ip address of server using the previously ran 'ping' command
  HOSTIP=$(echo $PINGOUTPUT| sed 's/^.*(\(.*\)).*$/\1/')
  # capture current running ssh tunnels (we only need 1 tunnel...)
  SSHTUNNELS=$(lsof -i -n | grep -i [s]sh | grep -i "ESTABLISHED" )
  if [[ $(echo $SSHTUNNELS | grep -i ${HOSTIP} | wc -l|awk '{print $1}') != 0 ]]; then
    # Tunnel already exists, but does it work?
    if [[ $(ssh -o BatchMode=yes  -p "$PORT" "$HPCUSER"@localhost whoami) == "$HPCUSER" ]]; then
      SETUPTUNNEL=0 # it does work
    else
      SETUPTUNNEL=1 # it does not work (can happen when computer went to sleep or such)
    fi
  else
    SETUPTUNNEL=1 # no tunnel yet
  fi
  if [[ 0 != $SETUPTUNNEL ]]; then
    echo
    echobold "Setting up ssh tunnel:"
    echo "  ssh -f -N -A -i "${HPCKEY}" -L "${PORT}":"$HPCHOST" "$HPCUSER"@"$GWHOST""
    ssh -f -N -A -i "${HPCKEY}" -L "${PORT}":"$HPCHOST":22 "$HPCUSER"@"$GWHOST"
    if [[ 0 != $? ]]; then # error
      echo "Can not connect..."
      echo "Exit $(basename $0)"
      exit 1
    fi
    SSHTUNNELS="$(lsof -i -n | grep -i [s]sh | grep -i "ESTABLISHED" )"
  else
    echobold "ssh tunnel already exists and can be used"
  fi

  # sshfs mount
  mkdir -p /Volumes/Llama && sshfs -o cache=no -o follow_symlinks -o workaround=rename -o reconnect -o port=2222 -o volname=Llama bnelissen@localhost: /Volumes/Llama
  if [[ $? == 0 ]]; then
    echobold "$VOLUMENAME mounted succesfully"
  else
    echobold "$VOLUMENAME Could not me mounted"
  fi
fi
